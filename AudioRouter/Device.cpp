/*++

Module Name:

    device.c - Device handling events for example driver.

Abstract:

   This file contains the device entry points and callbacks.

Environment:

    Kernel-mode Driver Framework

--*/

#include "Device.h"
#include "Device.tmh"

#include "Prelude.h"

#ifdef ALLOC_PRAGMA
#pragma alloc_text (PAGE, AudioRouterCreateDevice)
#endif

void log_err_device(const char* call, const char* func, unsigned int line, NTSTATUS status)
{
    TraceEvents(TRACE_LEVEL_ERROR, TRACE_DEVICE, "%s in %s (%s:%d) failed with status %!STATUS!", call, func, __FILE__, line, status);
}
#define TRY(expr) { NTSTATUS status = (expr); if (!NT_SUCCESS(status)) { log_err_device(#expr, __FUNCTION__, __LINE__, status); return status; } }
#define TRY_CLEAN(expr, clean) { NTSTATUS status = (expr); if (!NT_SUCCESS(status)) { log_err_device(#expr, __FUNCTION__, __LINE__, status); clean; return status; } }

NTSTATUS AudioRouterCreateDevice(_Inout_ PWDFDEVICE_INIT DeviceInit)
{
    PAGED_CODE();

    TraceEvents(TRACE_LEVEL_INFORMATION, TRACE_DEVICE, "<%!FUNC!>");

    WDF_IO_TYPE_CONFIG ioTypeConfig;
    WDF_IO_TYPE_CONFIG_INIT(&ioTypeConfig);
    ioTypeConfig.ReadWriteIoType = WdfDeviceIoBuffered;
    WdfDeviceInitSetIoTypeEx(DeviceInit, &ioTypeConfig);

    WDF_OBJECT_ATTRIBUTES deviceAttributes;
    WDF_OBJECT_ATTRIBUTES_INIT_CONTEXT_TYPE(&deviceAttributes, DEVICE_CONTEXT);
    deviceAttributes.EvtCleanupCallback = AudioRouterEvtDeviceContextCleanup;

    WDFDEVICE device;
    TRY(WdfDeviceCreate(&DeviceInit, &deviceAttributes, &device));

    // Get a pointer to the device context structure that we just associated
    // with the device object. We define this structure in the device.h
    // header file. DeviceGetContext is an inline function generated by
    // using the WDF_DECLARE_CONTEXT_TYPE_WITH_NAME macro in device.h.
    // This function will do the type checking and return the device context.
    // If you pass a wrong object handle it will return NULL and assert if
    // run under framework verifier mode.
    PDEVICE_CONTEXT deviceContext = DeviceGetContext(device);

    deviceContext->PrivateDeviceData = 0;

    // Create a device interface so that applications can find and talk to us.
    TRY(WdfDeviceCreateDeviceInterface(device, &GUID_DEVINTERFACE_AudioRouter, NULL));

    WDFSTRING ifNameRef;
    TRY(WdfStringCreate(NULL, WDF_NO_OBJECT_ATTRIBUTES, &ifNameRef));
    TRY(WdfDeviceRetrieveDeviceInterfaceString(device, &GUID_DEVINTERFACE_AudioRouter, NULL, ifNameRef));

    UNICODE_STRING ifName;
    WdfStringGetUnicodeString(ifNameRef, &ifName);
    TraceEvents(TRACE_LEVEL_INFORMATION, TRACE_DEVICE, "Device interface name: %wZ", &ifName);

    // Initialize the I/O Package and any Queues
    TRY(AudioRouterQueueInitialize(device));

    TraceEvents(TRACE_LEVEL_INFORMATION, TRACE_DEVICE, "</%!FUNC!>");

    return STATUS_SUCCESS;
}

VOID AudioRouterEvtDeviceContextCleanup(_In_ WDFOBJECT DriverObject)
{
    UNREFERENCED_PARAMETER(DriverObject);
    PAGED_CODE();

    TraceEvents(TRACE_LEVEL_INFORMATION, TRACE_DEVICE, "<%!FUNC!>");

    TraceEvents(TRACE_LEVEL_INFORMATION, TRACE_DEVICE, "</%!FUNC!>");
}
